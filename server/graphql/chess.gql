type Name {
    first: String!
    middle: String
    last: String!
}

type GameHistory {
    gameID: String!
    won: Boolean!
    tie: Boolean!
}

type Opponent{
    _id: ID!
    email: String!
    name: Name!
    signedupAt: String!
    currentGameID: String
    gameHistory: [GameHistory] 
}

type Move {
    fen: String!
    playedAt: String,
    _id: ID!
}

type Game{
    _id: ID!
    oppID: ID!
    moves: [Move]!
    oppToMove: Boolean!
    oppWon: Boolean!
    tied: Boolean!
}

type Query{
    getOpponentByEmail(email: String!) : Opponent!
    getOpponentById(id: String!): Opponent!
    getAllOpponents: [Opponent]!
    getGame(id: String!) : Game!
    testAuth: String!
}

type Mutation {
    createOpponent(firstName: String!, lastName: String!, middleName: String, email: String!, password: String!): String #JWT
    addMove(gameID: String!, fen: String!): Game!
    login(email: String!, password: String!): String #JWT
}